# Default values for bitcoind.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: bboerst/lncm-bitcoind
  tag: ""
  pullPolicy: IfNotPresent

strategyType: Recreate

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

extraEnv: {}
# MALLOC_ARENA_MAX: 1

# Few options for configuration...
#  1. Send in configuration as "arguments:". This simply adds each option as an argument to ./bitcoind
#  2. Specify the name of an "externalSecret:" that contains the contents of bitcoin.conf.
#  3. Both of these can be used together and is useful for things that you want to keep secret, like rpc
#     credentials. In this case, you would specify most configuration as "arguments" and rpc credentials
#     in an externalSecret.

arguments:
  # Send trace/debug info to console instead of debug.log file
  - -printtoconsole

  # Bind to given address and always listen on it (defaults to 127.0.0.1, enable if using tor)
  # - -bind=$(MY_POD_IP)

  # Accept command line and JSON-RPC commands
  # - -server

  # Accept connections from outside (enable if using tor)
  # - -listen

  # Allow rpc connections
  # - -rpcallowip=10.0.0.0/8

  # Useful when 'cookiePersistence' is enabled below. Stores the .cookie authfile in a location mapped
  # to a persistence volue. Useful for sharing the cookie with other pods.
  # - -rpccookiefile=/authcookie/.cookie

  # Tor control port to use if onion listening enabled (enable if using tor)
  # Must use IP address of tor service until https://github.com/bitcoin/bitcoin/pull/22288 is released - expected in bitcoin 0.22.1
  # Once PR mentioned above is released, switch to tor service name (ex: -torcontrol=tor-1.tor.svc.cluster.local:9050)
  # - -torcontrol=10.43.125.139:9051

  # Tor control port password (if using a tor 'control password' for controller auth)
  # - -torpassword=<the plain text/unhashed password>

  # Connect through SOCKS5 proxy (example connecting to a tor proxy installed on same cluster)
  # - -proxy=tor-1.tor.svc.cluster.local:9050

  # Maintain a full transaction index
  - -txindex

  # Do not load the wallet and disable wallet RPC calls
  - -disablewallet

  # Useful for setting up and debugging a tor proxy
  # - -debug=tor

  # Allow node to communicate with peers other encrypted connections
  # - -v2transport=true

  ### The following flags work well when running on a RaspberryPi
  # - -dbcache=100
  # - -maxorphantx=10
  # - -maxmempool=50
  # - -maxconnections=40
  # - -maxuploadtarget=5000

# This secret gets mounted as bitcoin.conf. Use this example command to generate this secret:
#
#  kubectl create secret generic bitcoin-conf-secret --from-file=bitcoin.conf=/path/to/bitcoin.conf
#
# The above example would then use "bitcoin-conf-secret" in configExternalSecretName
configExternalSecretName: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

service:
  enabled: true

  annotations: {}
  labels: {}
  ## Deprecated, instead simply do not provide a clusterIP value
  omitClusterIP: false
  # clusterIP: ""

  ## List of IP addresses at which the controller services are available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []

  loadBalancerIP: ""
  loadBalancerSourceRanges: []

  enableRpc: true
  enableP2p: true

  ## Set external traffic policy to: "Local" to preserve source IP on
  ## providers supporting it
  ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
  externalTrafficPolicy: ""

  # Must be either "None" or "ClientIP" if set. Kubernetes will default to "None".
  # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  sessionAffinity: ""

  healthCheckNodePort: 0

  ports:
    rpc: 8332
    p2p: 8333
    tcp: {}
    udp: {}

  targetPorts:
    rpc: rpc
    p2p: p2p

  type: NodePort

  # type: NodePort
  # nodePorts:
  #   rpc: 8332
  #   tcp: {}
  #   udp: {}
  nodePorts:
    rpc: ""
    p2p: ""
    tcp: {}
    udp: {}

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  # Values can be templated
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /

persistence:
  enabled: false
  ## Configure persistent storage for bitcoind data.
  ## `storageClassName`: Specifies the storage class to use for the volume.
  ## If defined, the volume will use the specified storage class.
  ## If set to "-", dynamic provisioning is disabled and the storageClassName is set to an empty string.
  ## If left undefined or set to null, the default storage class of the cluster is used. Examples of default provisioners include:
  ##   - gp2 on Amazon Web Services
  ##   - standard on Google Kubernetes Engine, Azure Kubernetes Service, and OpenStack
  # storageClass: "-"
  ##
  ## To reuse an existing Persistent Volume Claim (PVC), specify its name with `existingClaim`.
  ## If set, the StatefulSet will use the named PVC instead of creating a new one.
  # existingClaim: "your-existing-claim"
  ##
  ## To use a host path instead of a PVC, specify the path on the host machine.
  ## This option mounts a specified path inside the host to the pod. Use with caution as it ties your pod to specific nodes.
  # hostPath: "/path/to/the/config/folder"
  ## `accessModes`: Defines the access modes for the volume. Typical modes include:
  ##   - ReadWriteOnce: The volume can be mounted as read-write by a single node
  ##   - ReadOnlyMany: Multiple nodes can mount the volume as read-only
  ##   - ReadWriteMany: Multiple nodes can mount the volume as read-write
  accessModes: 
    - ReadWriteOnce
  ## `size`: Defines the size of the storage volume.
  ## Specify the size of the volume. Note that resizing an existing volume is not supported in all storage classes.
  size: 600Gi

  ## TLS configuration for secure communication (currently unused).
  ## Uncomment the following lines and specify the secret name and hostnames if TLS is required.
  # tls:
  #   - secretName: "bitcoind-tls"
  #     hosts:
  #       - "bitcoind.local"

# cookiePersistence will mount a persistent volume with the rpc cookie (.cookie). This is
# useful when using the nfs-client-provisioner and sharing this volume with other apps on the cluster.
cookiePersistence:
  enabled: false
  ## bitcoind data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  ##
  ## If you want to use a volume on the host machine instead of a PVC:
  # hostPath: /path/to/the/config/folder
  accessModes:
    - ReadWriteOnce
  size: 5Mi

  tls: []
  #  - secretName: bitcoind-tls
  #    hosts:
  #      - bitcoind.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

extraManifests: []
  # - |
  #   apiVersion: traefik.io/v1alpha1
  #   kind: IngressRouteTCP
  #   metadata:
  #     labels:
  #       {{- include "bitcoind.labels" . | nindent 4 }}
  #     name: {{ template "bitcoind.fullname" . }}
  #   spec:
  #     entryPoints:
  #     # Ensure that you have an entrypoint configured for traefik, like this:
  #     #  additionalArguments:
  #     #  - "--entrypoints.bitcoind-8332.address=:8332"
  #     - bitcoind-8332
  #     routes:
  #     - match: HostSNI(`*`)
  #       services:
  #       - name: {{ include "bitcoind.fullname" . }}
  #         port: 8332