# Default values for ride-the-lightning.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: shahanafarooqui/rtl
  tag: ""
  pullPolicy: IfNotPresent

strategyType: Recreate

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Freely specify the configuration options for RTL in YAML format. This gets converted to json and written
#  to the configuration file. Ex: https://github.com/Ride-The-Lightning/RTL/blob/master/Sample-RTL-Config.json
rtlConfig:
  multiPass: "changethispassword" # <The password in plain text, default 'password', Required>
  port: "3000" # <port number for the rtl node server, default '3000', Required>
  host: "0.0.0.0" # <host for the rtl node server, default 'all IPs', Optional>
  defaultNodeIndex: 1 # <Default index to load when rtl server starts, default 1, Optional>
  dbDirectoryPath: "/root/.rtl/data" # <Complete path of the folder where rtl database file should be saved, defults to RTL root, Optional>
  SSO:
    rtlSSO: 0 # <parameter to turn SSO off/on. Allowed values - 1 (single sign on via an external cookie), 0 (stand alone RTL authentication), Required>
  #   rtlCookiePath: "<Full path of the cookie file including the file name. The application url needs to pass the value from this cookie file as query param 'access-key' for the SSO authentication to work, Required if SSO=1 else empty (Optional)>"
  #   logoutRedirectLink: "<URL to re-direct to after logout/timeout from RTL, Required if SSO=1 else empty (Optional)>"
  nodes: 
  # - index: <Incremental node indices starting from 1, Required>
  #   lnNode: "<Node name to uniquely identify the node in the UI, Required>"
  #   lnImplementation: "<LNP implementation, Allowed values LND/CLN/ECL, Required>"
  #   Authentication: 
  #     macaroonPath: "<Path for the folder containing 'admin.macaroon' for LND node, Required for LND. Example /credentials/>"
  #     runePath: "<Complete path including filename for CLN rune for the node, Required for CLN. Example /credentials/rune>"
  #     lnApiPassword: "<Password to be used for ECL API authentication. Mandatory only for ECL if the configPath is missing>"
  #     swapMacaroonPath: "<Path for the folder containing 'loop.macaroon' (LND), Required for LND Loop>"
  #     boltzMacaroonPath: "<Path for the folder containing 'admin.macaroon' (Boltz), Required for Boltz Swaps>"
  #     configPath: "<Full path of the lnd.conf/core lightning config/eclair.conf file including the file name, if present locally, Optional, only mandatory for ECL if the lnApiPassword is missing>"
  #   Settings: 
  #     userPersona: "<User persona to tailor the data on UI. Allowed values MERCHANT/OPERATOR. Default MERCHANT, Optional>"
  #     themeMode: "<Theme modes, Allowed values DAY, NIGHT. Default DAY, Optional>"
  #     themeColor: "<Theme colors, Allowed values PURPLE, TEAL, INDIGO, PINK, YELLOW. Default PURPLE, Optional>"
  #     channelBackupPath: "<Path to save channel backup file. Only for LND implementation, Default <RTL root>\backup\node-1, Optional>"
  #     bitcoindConfigPath: "<Path of bitcoind.conf path if available locally>"
  #     logLevel: "<logging levels, will log in accordance with the logLevel value provided, Allowed values ERROR, WARN, INFO, DEBUG>"
  #     fiatConversion: <parameter to turn fiat conversion off/on. Allowed values - true, false, default false, Optional>
  #     currencyUnit: "<Optional: Fiat current Unit for currency conversion, default 'USD', Optional>"
  #     unannouncedChannels: <parameter to turn off/on setting for opening announced Channels, default false, Optional>
  #     lnServerUrl: "<Service url for LND/Core Lightning REST APIs for the node, e.g. https://192.168.0.1:8080 OR https://192.168.0.1:3001 OR http://192.168.0.1:8080. Default 'https://127.0.0.1:8080', Optional>"
  #     swapServerUrl: "<Service url for swap server REST APIs for the node, e.g. https://127.0.0.1:8081, Optional>"
  #     boltzServerUrl: "<Service url for boltz server REST APIs for the node, e.g. https://127.0.0.1:9003, Optional>"
  ### Example:
  # - index: 1
  #   lnNode: "Node 1"
  #   lnImplementation: "CLN"
  #   Authentication:
  #     runePath: "/credentials/rune"
  #   Settings:
  #     userPersona: "OPERATOR"
  #     themeMode: "DAY"
  #     themeColor: "PURPLE"
  #     logLevel: "ERROR"
  #     fiatConversion: false
  #     currencyUnit: "USD"
  #     unannouncedChannels: false
  #     lnServerUrl: "https://c-lightning.lightning.svc.cluster.local:3001"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# Macroon in base64 format for the LND node. This gets mounted as /data/admin.macaroon
macaroon: ""

# Rune in base64 format for the CLN node. This gets mounted as /data/admin.macaroon
rune: ""

# TLS certificate in base64 format for the LND node. This gets mounted as /data/tls.cert
certificate: ""

# When using a custom TLS certificate for ingress (ex. LetsEncrypt), set this to true and
#  set the tlsSecretName to same as the secret name in the ingress. This will mount the custom
#  certificate to /ssl/tls.crt and /ssl/tls.key, so also set this in the configurationFile as
#  tlscertpath=/ssl/tls.crt and tlskeypath=/ssl/tls.key
mountTlsFromSecret: false
tlsSecretName: ""

configurationFile:
  lit.conf: |-
    remote.lnd.macaroonpath=/data/admin.macaroon
    remote.lnd.tlscertpath=/data/tls.cert
    httpslisten=0.0.0.0:8443
    lnd-mode=remote
    remote.lnd.rpcserver=lnd1.lightning.svc.cluster.local:10009
    tlscertpath=/ssl/tls.crt
    tlskeypath=/ssl/tls.key
  
arguments: []

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

service:
  enabled: true

  annotations: {}
  labels: {}
  ## Deprecated, instead simply do not provide a clusterIP value
  omitClusterIP: false
  # clusterIP: ""

  ## List of IP addresses at which the controller services are available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []

  loadBalancerIP: ""
  loadBalancerSourceRanges: []

  ## Set external traffic policy to: "Local" to preserve source IP on
  ## providers supporting it
  ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
  externalTrafficPolicy: ""

  # Must be either "None" or "ClientIP" if set. Kubernetes will default to "None".
  # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  sessionAffinity: ""

  healthCheckNodePort: 0

  ports:
    tcp: 3000

  type: ClusterIP

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  # Values can be templated
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /

  # pathType is only for k8s >= 1.1=
  pathType: Prefix

  hosts:
    - chart-example.local
  ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  extraPaths: []
  # - path: /*
  #   backend:
  #     serviceName: ssl-redirect
  #     servicePort: use-annotation
  ## Or for k8s > 1.19
  # - path: /*
  #   pathType: Prefix
  #   backend:
  #     service:
  #       name: ssl-redirect
  #       port:
  #         name: use-annotation

persistence:
  enabled: false
  ## ride-the-lightning data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  ##
  ## If you want to use a volume on the host machine instead of a PVC:
  # hostPath: /path/to/the/config/folder
  accessMode: ReadWriteOnce
  size: 1Gi

  tls: []
  #  - secretName: ride-the-lightning-tls
  #    hosts:
  #      - ride-the-lightning.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
