# Default values for bitcoin-core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: lncm/bitcoind
  tag: v24.0.1
  pullPolicy: IfNotPresent

strategyType: Recreate

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

arguments:
  # Send trace/debug info to console instead of debug.log file
  - -printtoconsole

  # Bind to given address and always listen on it (defaults to 127.0.0.1, enable if using tor)
  # - -bind=$(MY_POD_IP)

  # Accept command line and JSON-RPC commands
  # - -server

  # Accept connections from outside (enable if using tor)
  # - -listen

  # Allow rpc connections
  # - -rpcallowip=10.0.0.0/8

  # Useful when 'cookiePersistence' is enabled below. Stores the .cookie authfile in a location mapped
  # to a persistence volue. Useful for sharing the cookie with other pods.
  # - -rpccookiefile=/authcookie/.cookie

  # Tor control port to use if onion listening enabled (enable if using tor)
  # Must use IP address of tor service until https://github.com/bitcoin/bitcoin/pull/22288 is released - expected in bitcoin 0.22.1
  # Once PR mentioned above is released, switch to tor service name (ex: -torcontrol=tor-1.tor.svc.cluster.local:9050)
  # - -torcontrol=10.43.125.139:9051

  # Tor control port password (if using a tor 'control password' for controller auth)
  # - -torpassword=<the plain text/unhashed password>

  # Connect through SOCKS5 proxy (example connecting to a tor proxy installed on same cluster)
  # - -proxy=tor-1.tor.svc.cluster.local:9050

  # Maintain a full transaction index
  - -txindex

  # Do not load the wallet and disable wallet RPC calls
  - -disablewallet

  # Useful for setting up and debugging a tor proxy
  # - -debug=tor

  ### The following flags work well when running on a RaspberryPi
  # - -dbcache=100
  # - -maxorphantx=10
  # - -maxmempool=50
  # - -maxconnections=40
  # - -maxuploadtarget=5000

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: true

  annotations: {}
  labels: {}
  ## Deprecated, instead simply do not provide a clusterIP value
  omitClusterIP: false
  # clusterIP: ""

  ## List of IP addresses at which the controller services are available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []

  loadBalancerIP: ""
  loadBalancerSourceRanges: []

  enableRpc: true
  enableP2p: true

  ## Set external traffic policy to: "Local" to preserve source IP on
  ## providers supporting it
  ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
  externalTrafficPolicy: ""

  # Must be either "None" or "ClientIP" if set. Kubernetes will default to "None".
  # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  sessionAffinity: ""

  healthCheckNodePort: 0

  ports:
    rpc: 8332
    p2p: 8333
    tcp: {}
    udp: {}

  targetPorts:
    rpc: rpc
    p2p: p2p

  type: NodePort

  # type: NodePort
  # nodePorts:
  #   rpc: 8332
  #   tcp: {}
  #   udp: {}
  nodePorts:
    rpc: ""
    p2p: ""
    tcp: {}
    udp: {}

persistence:
  enabled: false
  ## bitcoin-core data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  ##
  ## If you want to use a volume on the host machine instead of a PVC:
  # hostPath: /path/to/the/config/folder
  accessMode: ReadWriteOnce
  size: 5Gi

  tls: []
  #  - secretName: bitcoin-core-tls
  #    hosts:
  #      - bitcoin-core.local

# cookiePersistence will mount a persistent volume with the rpc cookie (.cookie). This is
# useful when using the nfs-client-provisioner and sharing this volume with other apps on the cluster.
cookiePersistence:
  enabled: false
  ## bitcoin-core data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  ##
  ## If you want to use a volume on the host machine instead of a PVC:
  # hostPath: /path/to/the/config/folder
  accessMode: ReadWriteOnce
  size: 5Mi

  tls: []
  #  - secretName: bitcoin-core-tls
  #    hosts:
  #      - bitcoin-core.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
